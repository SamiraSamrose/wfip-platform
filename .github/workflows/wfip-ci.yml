name: WFIP CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        playwright install chromium
    
    - name: Run WFIP Demo
      run: |
        cd backend
        python wfip_server.py
    
    - name: Start API Server
      run: |
        cd backend
        uvicorn wfip_server:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Test API Endpoints
      run: |
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/features || exit 1

  frontend-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build

  feature-compliance-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install WFIP
      run: |
        cd backend
        pip install -r requirements.txt
        playwright install chromium
    
    - name: Run Feature Compliance Check
      id: compliance
      run: |
        cd backend
        python << 'PYTHON'
import asyncio
import json
from wfip_server import WFIP_CLI

async def main():
    cli = WFIP_CLI()
    result = await cli.scan_directory("../frontend/src", ui_name="PR Build")
    
    score = result['compatibility_score']['global_support']
    high_risk = result['compatibility_score']['features_by_risk']['high']
    
    report = {
        'compliance_score': score,
        'passed': score >= 80,
        'high_risk_features': high_risk,
        'total_features': result['usages_found']
    }
    
    with open('compliance_report.json', 'w') as f:
        json.dump(report, f, indent=2)
    
    print(f"::set-output name=score::{score}")
    print(f"::set-output name=passed::{str(score >= 80).lower()}")

asyncio.run(main())
PYTHON
    
    - name: Comment PR
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('backend/compliance_report.json', 'utf8'));
          
          const emoji = report.passed ? '✅' : '❌';
          const status = report.passed ? 'PASSED' : 'FAILED';
          
          let body = `## ${emoji} WFIP Feature Compliance Report\n\n`;
          body += `**Status:** ${status}\n`;
          body += `**Compliance Score:** ${report.compliance_score.toFixed(1)}%\n`;
          body += `**Total Features Detected:** ${report.total_features}\n\n`;
          
          if (report.high_risk_features.length > 0) {
            body += `### ⚠️ High Risk Features Detected\n\n`;
            body += report.high_risk_features.map(f => `- \`${f}\``).join('\n');
            body += `\n\nThese features have limited browser support and may affect user experience.\n`;
          } else {
            body += `### ✨ No High Risk Features\n\nAll detected features have good browser support!\n`;
          }
          
          body += `\n---\n*Generated by WFIP Bot*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
EOF
